

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CylnderEntities
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class IndoGhanaEntities : DbContext
{
    public IndoGhanaEntities()
        : base("name=IndoGhanaEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<vwCylinderMaster> vwCylinderMasters { get; set; }


    public virtual ObjectResult<usp_tblStatusMasterGetByType_Result> usp_tblStatusMasterGetByType(Nullable<int> statusTypeID)
    {

        var statusTypeIDParameter = statusTypeID.HasValue ?
            new ObjectParameter("StatusTypeID", statusTypeID) :
            new ObjectParameter("StatusTypeID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblStatusMasterGetByType_Result>("usp_tblStatusMasterGetByType", statusTypeIDParameter);
    }


    public virtual ObjectResult<string> usp_CustomerMasterInsertUpdate(Nullable<int> customerID, string customerName, string customerAddress, string contactPersonName, string contactNumber, string email, Nullable<int> branchID, Nullable<int> companyID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status, Nullable<bool> isOwner)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));


        var customerAddressParameter = customerAddress != null ?
            new ObjectParameter("CustomerAddress", customerAddress) :
            new ObjectParameter("CustomerAddress", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactNumberParameter = contactNumber != null ?
            new ObjectParameter("ContactNumber", contactNumber) :
            new ObjectParameter("ContactNumber", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        var isOwnerParameter = isOwner.HasValue ?
            new ObjectParameter("IsOwner", isOwner) :
            new ObjectParameter("IsOwner", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CustomerMasterInsertUpdate", customerIDParameter, customerNameParameter, customerAddressParameter, contactPersonNameParameter, contactNumberParameter, emailParameter, branchIDParameter, companyIDParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter, isOwnerParameter);
    }


    public virtual ObjectResult<usp_CustomerSiteMasterGetbyID_Result> usp_CustomerSiteMasterGetbyID(Nullable<int> customerID)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSiteMasterGetbyID_Result>("usp_CustomerSiteMasterGetbyID", customerIDParameter);
    }


    public virtual ObjectResult<usp_ManufacturerMasterGet_Result> usp_ManufacturerMasterGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManufacturerMasterGet_Result>("usp_ManufacturerMasterGet");
    }


    public virtual ObjectResult<usp_ManufacturerMasterGetByID_Result> usp_ManufacturerMasterGetByID(Nullable<int> manufacturerID)
    {

        var manufacturerIDParameter = manufacturerID.HasValue ?
            new ObjectParameter("ManufacturerID", manufacturerID) :
            new ObjectParameter("ManufacturerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManufacturerMasterGetByID_Result>("usp_ManufacturerMasterGetByID", manufacturerIDParameter);
    }


    public virtual ObjectResult<string> usp_ManufacturerMasterInsertUpdate(Nullable<int> manufacturerID, string manufacturerName, string manufacturerAddress, string contactPersonName, string contactNumber, string email, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status)
    {

        var manufacturerIDParameter = manufacturerID.HasValue ?
            new ObjectParameter("ManufacturerID", manufacturerID) :
            new ObjectParameter("ManufacturerID", typeof(int));


        var manufacturerNameParameter = manufacturerName != null ?
            new ObjectParameter("ManufacturerName", manufacturerName) :
            new ObjectParameter("ManufacturerName", typeof(string));


        var manufacturerAddressParameter = manufacturerAddress != null ?
            new ObjectParameter("ManufacturerAddress", manufacturerAddress) :
            new ObjectParameter("ManufacturerAddress", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactNumberParameter = contactNumber != null ?
            new ObjectParameter("ContactNumber", contactNumber) :
            new ObjectParameter("ContactNumber", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var creationDateParameter = creationDate.HasValue ?
            new ObjectParameter("CreationDate", creationDate) :
            new ObjectParameter("CreationDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ManufacturerMasterInsertUpdate", manufacturerIDParameter, manufacturerNameParameter, manufacturerAddressParameter, contactPersonNameParameter, contactNumberParameter, emailParameter, creationDateParameter, createdByParameter, updateByParameter, statusParameter);
    }


    public virtual ObjectResult<string> usp_VehicleMasterAddUpdate(Nullable<int> vehicleID, string vehicleNumber, Nullable<int> companyID, Nullable<int> branchID, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
    {

        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("VehicleID", vehicleID) :
            new ObjectParameter("VehicleID", typeof(int));


        var vehicleNumberParameter = vehicleNumber != null ?
            new ObjectParameter("VehicleNumber", vehicleNumber) :
            new ObjectParameter("VehicleNumber", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var creationDateParameter = creationDate.HasValue ?
            new ObjectParameter("CreationDate", creationDate) :
            new ObjectParameter("CreationDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VehicleMasterAddUpdate", vehicleIDParameter, vehicleNumberParameter, companyIDParameter, branchIDParameter, creationDateParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
    }


    public virtual ObjectResult<usp_CustomerListGet_Result> usp_CustomerListGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerListGet_Result>("usp_CustomerListGet");
    }


    public virtual ObjectResult<usp_CustomerSiteListGet_Result> usp_CustomerSiteListGet(Nullable<int> customerID)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSiteListGet_Result>("usp_CustomerSiteListGet", customerIDParameter);
    }


    public virtual ObjectResult<usp_VendorBranchListGet_Result> usp_VendorBranchListGet(Nullable<int> vendorID)
    {

        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchListGet_Result>("usp_VendorBranchListGet", vendorIDParameter);
    }


    public virtual ObjectResult<usp_VendorListGet_Result> usp_VendorListGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorListGet_Result>("usp_VendorListGet");
    }


    public virtual ObjectResult<usp_CustomrSiteListGet_Result> usp_CustomrSiteListGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomrSiteListGet_Result>("usp_CustomrSiteListGet");
    }


    public virtual ObjectResult<usp_VendorBranchListDetailsGet_Result> usp_VendorBranchListDetailsGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchListDetailsGet_Result>("usp_VendorBranchListDetailsGet");
    }


    public virtual ObjectResult<usp_CylinderMasterGetBarcodeImage_Result> usp_CylinderMasterGetBarcodeImage(string cylindeNumber)
    {

        var cylindeNumberParameter = cylindeNumber != null ?
            new ObjectParameter("CylindeNumber", cylindeNumber) :
            new ObjectParameter("CylindeNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetBarcodeImage_Result>("usp_CylinderMasterGetBarcodeImage", cylindeNumberParameter);
    }


    public virtual ObjectResult<string> usp_tblCylinderFillInsert(string cylindeIDs, Nullable<int> createdBy, Nullable<int> branchID, Nullable<int> companyID)
    {

        var cylindeIDsParameter = cylindeIDs != null ?
            new ObjectParameter("cylindeIDs", cylindeIDs) :
            new ObjectParameter("cylindeIDs", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tblCylinderFillInsert", cylindeIDsParameter, createdByParameter, branchIDParameter, companyIDParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tblBatchStartEndInsert(string vanBatchNumber, string batchStartDateTime, string batchEndDatetime, string forDate, Nullable<int> sstat, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> userID)
    {

        var vanBatchNumberParameter = vanBatchNumber != null ?
            new ObjectParameter("VanBatchNumber", vanBatchNumber) :
            new ObjectParameter("VanBatchNumber", typeof(string));


        var batchStartDateTimeParameter = batchStartDateTime != null ?
            new ObjectParameter("BatchStartDateTime", batchStartDateTime) :
            new ObjectParameter("BatchStartDateTime", typeof(string));


        var batchEndDatetimeParameter = batchEndDatetime != null ?
            new ObjectParameter("BatchEndDatetime", batchEndDatetime) :
            new ObjectParameter("BatchEndDatetime", typeof(string));


        var forDateParameter = forDate != null ?
            new ObjectParameter("ForDate", forDate) :
            new ObjectParameter("ForDate", typeof(string));


        var sstatParameter = sstat.HasValue ?
            new ObjectParameter("Sstat", sstat) :
            new ObjectParameter("Sstat", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblBatchStartEndInsert", vanBatchNumberParameter, batchStartDateTimeParameter, batchEndDatetimeParameter, forDateParameter, sstatParameter, companyIDParameter, branchIDParameter, userIDParameter);
    }


    public virtual ObjectResult<usp_tblUserMasterGet_Result> usp_tblUserMasterGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblUserMasterGet_Result>("usp_tblUserMasterGet");
    }


    public virtual ObjectResult<usp_tblUserMasterGetByID_Result> usp_tblUserMasterGetByID(Nullable<int> user_Id)
    {

        var user_IdParameter = user_Id.HasValue ?
            new ObjectParameter("User_Id", user_Id) :
            new ObjectParameter("User_Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblUserMasterGetByID_Result>("usp_tblUserMasterGetByID", user_IdParameter);
    }


    public virtual ObjectResult<string> usp_tblUserMasterInsertUpdate(Nullable<int> userId, string user_Name, string address, string email, string contact_Number, string iMIE1, string iMIE2, string login_Id, string password, Nullable<int> group_Id, Nullable<int> company_Id, Nullable<System.DateTime> creationDate, Nullable<bool> status, Nullable<int> createdBy, Nullable<int> branch_Id, Nullable<int> versionID)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var user_NameParameter = user_Name != null ?
            new ObjectParameter("User_Name", user_Name) :
            new ObjectParameter("User_Name", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("Address", address) :
            new ObjectParameter("Address", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var contact_NumberParameter = contact_Number != null ?
            new ObjectParameter("Contact_Number", contact_Number) :
            new ObjectParameter("Contact_Number", typeof(string));


        var iMIE1Parameter = iMIE1 != null ?
            new ObjectParameter("IMIE1", iMIE1) :
            new ObjectParameter("IMIE1", typeof(string));


        var iMIE2Parameter = iMIE2 != null ?
            new ObjectParameter("IMIE2", iMIE2) :
            new ObjectParameter("IMIE2", typeof(string));


        var login_IdParameter = login_Id != null ?
            new ObjectParameter("Login_Id", login_Id) :
            new ObjectParameter("Login_Id", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var group_IdParameter = group_Id.HasValue ?
            new ObjectParameter("Group_Id", group_Id) :
            new ObjectParameter("Group_Id", typeof(int));


        var company_IdParameter = company_Id.HasValue ?
            new ObjectParameter("Company_Id", company_Id) :
            new ObjectParameter("Company_Id", typeof(int));


        var creationDateParameter = creationDate.HasValue ?
            new ObjectParameter("CreationDate", creationDate) :
            new ObjectParameter("CreationDate", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var branch_IdParameter = branch_Id.HasValue ?
            new ObjectParameter("Branch_Id", branch_Id) :
            new ObjectParameter("Branch_Id", typeof(int));


        var versionIDParameter = versionID.HasValue ?
            new ObjectParameter("VersionID", versionID) :
            new ObjectParameter("VersionID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_tblUserMasterInsertUpdate", userIdParameter, user_NameParameter, addressParameter, emailParameter, contact_NumberParameter, iMIE1Parameter, iMIE2Parameter, login_IdParameter, passwordParameter, group_IdParameter, company_IdParameter, creationDateParameter, statusParameter, createdByParameter, branch_IdParameter, versionIDParameter);
    }


    public virtual ObjectResult<usp_tblGroupGet_Result> usp_tblGroupGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblGroupGet_Result>("usp_tblGroupGet");
    }


    public virtual ObjectResult<usp_tblCompanyBranchMasterListGet_Result> usp_tblCompanyBranchMasterListGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblCompanyBranchMasterListGet_Result>("usp_tblCompanyBranchMasterListGet");
    }


    public virtual ObjectResult<string> usp_VendorMasterInsertUpdate(Nullable<int> vendorID, string vendorName, string vendorAddress, string contactPersonName, string contactNumber, string emailID, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
    {

        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var vendorAddressParameter = vendorAddress != null ?
            new ObjectParameter("VendorAddress", vendorAddress) :
            new ObjectParameter("VendorAddress", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactNumberParameter = contactNumber != null ?
            new ObjectParameter("ContactNumber", contactNumber) :
            new ObjectParameter("ContactNumber", typeof(string));


        var emailIDParameter = emailID != null ?
            new ObjectParameter("EmailID", emailID) :
            new ObjectParameter("EmailID", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VendorMasterInsertUpdate", vendorIDParameter, vendorNameParameter, vendorAddressParameter, contactPersonNameParameter, contactNumberParameter, emailIDParameter, companyIDParameter, branchIDParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
    }


    public virtual ObjectResult<usp_CustomerMasterGet_Result> usp_CustomerMasterGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerMasterGet_Result>("usp_CustomerMasterGet");
    }


    public virtual ObjectResult<usp_CustomerMasterGetbyID_Result> usp_CustomerMasterGetbyID(Nullable<int> customerID)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerMasterGetbyID_Result>("usp_CustomerMasterGetbyID", customerIDParameter);
    }


    public virtual ObjectResult<usp_VendorMasterGet_Result> usp_VendorMasterGet()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorMasterGet_Result>("usp_VendorMasterGet");
    }


    public virtual ObjectResult<usp_VendorMasterGetbyID_Result> usp_VendorMasterGetbyID(Nullable<int> customerID)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorMasterGetbyID_Result>("usp_VendorMasterGetbyID", customerIDParameter);
    }


    public virtual ObjectResult<string> usp_CustomerMasterSiteInsertUpdate(Nullable<int> customerID, Nullable<int> customerIDSiteID, string siteName, string siteAddress, string contactPersonName, string contactNumber, string email, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
    {

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        var customerIDSiteIDParameter = customerIDSiteID.HasValue ?
            new ObjectParameter("CustomerIDSiteID", customerIDSiteID) :
            new ObjectParameter("CustomerIDSiteID", typeof(int));


        var siteNameParameter = siteName != null ?
            new ObjectParameter("SiteName", siteName) :
            new ObjectParameter("SiteName", typeof(string));


        var siteAddressParameter = siteAddress != null ?
            new ObjectParameter("SiteAddress", siteAddress) :
            new ObjectParameter("SiteAddress", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactNumberParameter = contactNumber != null ?
            new ObjectParameter("ContactNumber", contactNumber) :
            new ObjectParameter("ContactNumber", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CustomerMasterSiteInsertUpdate", customerIDParameter, customerIDSiteIDParameter, siteNameParameter, siteAddressParameter, contactPersonNameParameter, contactNumberParameter, emailParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
    }


    public virtual ObjectResult<string> usp_VendorMasterBranchInsertUpdate(Nullable<int> vendorID, Nullable<int> vendorBranchID, string vendorBranchName, string branchAddress, string contactPersonName, string contactNumber, string email, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
    {

        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        var vendorBranchIDParameter = vendorBranchID.HasValue ?
            new ObjectParameter("VendorBranchID", vendorBranchID) :
            new ObjectParameter("VendorBranchID", typeof(int));


        var vendorBranchNameParameter = vendorBranchName != null ?
            new ObjectParameter("VendorBranchName", vendorBranchName) :
            new ObjectParameter("VendorBranchName", typeof(string));


        var branchAddressParameter = branchAddress != null ?
            new ObjectParameter("BranchAddress", branchAddress) :
            new ObjectParameter("BranchAddress", typeof(string));


        var contactPersonNameParameter = contactPersonName != null ?
            new ObjectParameter("ContactPersonName", contactPersonName) :
            new ObjectParameter("ContactPersonName", typeof(string));


        var contactNumberParameter = contactNumber != null ?
            new ObjectParameter("ContactNumber", contactNumber) :
            new ObjectParameter("ContactNumber", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VendorMasterBranchInsertUpdate", vendorIDParameter, vendorBranchIDParameter, vendorBranchNameParameter, branchAddressParameter, contactPersonNameParameter, contactNumberParameter, emailParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
    }


    public virtual ObjectResult<usp_VendorBranchMasterGetbyID_Result> usp_VendorBranchMasterGetbyID(Nullable<int> vendorBranchID)
    {

        var vendorBranchIDParameter = vendorBranchID.HasValue ?
            new ObjectParameter("VendorBranchID", vendorBranchID) :
            new ObjectParameter("VendorBranchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchMasterGetbyID_Result>("usp_VendorBranchMasterGetbyID", vendorBranchIDParameter);
    }


    public virtual ObjectResult<usp_VendorBranchMasterGet_Result> usp_VendorBranchMasterGet(Nullable<int> vendorID)
    {

        var vendorIDParameter = vendorID.HasValue ?
            new ObjectParameter("VendorID", vendorID) :
            new ObjectParameter("VendorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VendorBranchMasterGet_Result>("usp_VendorBranchMasterGet", vendorIDParameter);
    }


    public virtual int usp_UpdateLogoutTime(Nullable<long> logId, string machineIP)
    {

        var logIdParameter = logId.HasValue ?
            new ObjectParameter("LogId", logId) :
            new ObjectParameter("LogId", typeof(long));


        var machineIPParameter = machineIP != null ?
            new ObjectParameter("machineIP", machineIP) :
            new ObjectParameter("machineIP", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateLogoutTime", logIdParameter, machineIPParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_CustomerTransactionSignInsert(string transactionNumber, Nullable<int> customerID, Nullable<int> currentCustomerBranchID, Nullable<int> isSatisfied, string customerSignature, Nullable<int> logid, string forDate, string currentDateTime, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> userID, string sstat, string remarks)
    {

        var transactionNumberParameter = transactionNumber != null ?
            new ObjectParameter("TransactionNumber", transactionNumber) :
            new ObjectParameter("TransactionNumber", typeof(string));


        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
            new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
            new ObjectParameter("CurrentCustomerBranchID", typeof(int));


        var isSatisfiedParameter = isSatisfied.HasValue ?
            new ObjectParameter("IsSatisfied", isSatisfied) :
            new ObjectParameter("IsSatisfied", typeof(int));


        var customerSignatureParameter = customerSignature != null ?
            new ObjectParameter("CustomerSignature", customerSignature) :
            new ObjectParameter("CustomerSignature", typeof(string));


        var logidParameter = logid.HasValue ?
            new ObjectParameter("logid", logid) :
            new ObjectParameter("logid", typeof(int));


        var forDateParameter = forDate != null ?
            new ObjectParameter("ForDate", forDate) :
            new ObjectParameter("ForDate", typeof(string));


        var currentDateTimeParameter = currentDateTime != null ?
            new ObjectParameter("CurrentDateTime", currentDateTime) :
            new ObjectParameter("CurrentDateTime", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var sstatParameter = sstat != null ?
            new ObjectParameter("Sstat", sstat) :
            new ObjectParameter("Sstat", typeof(string));


        var remarksParameter = remarks != null ?
            new ObjectParameter("Remarks", remarks) :
            new ObjectParameter("Remarks", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CustomerTransactionSignInsert", transactionNumberParameter, customerIDParameter, currentCustomerBranchIDParameter, isSatisfiedParameter, customerSignatureParameter, logidParameter, forDateParameter, currentDateTimeParameter, companyIDParameter, branchIDParameter, userIDParameter, sstatParameter, remarksParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_DayStartDayEndInsert(string dayStartDateTime, string dayEndDateTime, string forDate, string sstat, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> userID, Nullable<int> logid, string iMEI)
    {

        var dayStartDateTimeParameter = dayStartDateTime != null ?
            new ObjectParameter("DayStartDateTime", dayStartDateTime) :
            new ObjectParameter("DayStartDateTime", typeof(string));


        var dayEndDateTimeParameter = dayEndDateTime != null ?
            new ObjectParameter("DayEndDateTime", dayEndDateTime) :
            new ObjectParameter("DayEndDateTime", typeof(string));


        var forDateParameter = forDate != null ?
            new ObjectParameter("ForDate", forDate) :
            new ObjectParameter("ForDate", typeof(string));


        var sstatParameter = sstat != null ?
            new ObjectParameter("Sstat", sstat) :
            new ObjectParameter("Sstat", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var logidParameter = logid.HasValue ?
            new ObjectParameter("logid", logid) :
            new ObjectParameter("logid", typeof(int));


        var iMEIParameter = iMEI != null ?
            new ObjectParameter("IMEI", iMEI) :
            new ObjectParameter("IMEI", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DayStartDayEndInsert", dayStartDateTimeParameter, dayEndDateTimeParameter, forDateParameter, sstatParameter, companyIDParameter, branchIDParameter, userIDParameter, logidParameter, iMEIParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tblCylinderInVanInsert(Nullable<int> vehicleID, Nullable<double> initialSize, Nullable<double> remainingsizeforRefill, string vanBatchNumber, string vendorName, string cylinderLoadingDateTime, Nullable<int> cylinderID, string cylinderNumber, Nullable<int> cylinderVendorID, Nullable<int> cylinderBranchID, Nullable<int> sstat, Nullable<int> transactionPoint, Nullable<int> locationID, Nullable<int> transType, Nullable<int> cylinderStatus, Nullable<int> ownerId, Nullable<int> vendorBranchID, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> userID)
    {

        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("vehicleID", vehicleID) :
            new ObjectParameter("vehicleID", typeof(int));


        var initialSizeParameter = initialSize.HasValue ?
            new ObjectParameter("initialSize", initialSize) :
            new ObjectParameter("initialSize", typeof(double));


        var remainingsizeforRefillParameter = remainingsizeforRefill.HasValue ?
            new ObjectParameter("remainingsizeforRefill", remainingsizeforRefill) :
            new ObjectParameter("remainingsizeforRefill", typeof(double));


        var vanBatchNumberParameter = vanBatchNumber != null ?
            new ObjectParameter("vanBatchNumber", vanBatchNumber) :
            new ObjectParameter("vanBatchNumber", typeof(string));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var cylinderLoadingDateTimeParameter = cylinderLoadingDateTime != null ?
            new ObjectParameter("cylinderLoadingDateTime", cylinderLoadingDateTime) :
            new ObjectParameter("cylinderLoadingDateTime", typeof(string));


        var cylinderIDParameter = cylinderID.HasValue ?
            new ObjectParameter("cylinderID", cylinderID) :
            new ObjectParameter("cylinderID", typeof(int));


        var cylinderNumberParameter = cylinderNumber != null ?
            new ObjectParameter("cylinderNumber", cylinderNumber) :
            new ObjectParameter("cylinderNumber", typeof(string));


        var cylinderVendorIDParameter = cylinderVendorID.HasValue ?
            new ObjectParameter("cylinderVendorID", cylinderVendorID) :
            new ObjectParameter("cylinderVendorID", typeof(int));


        var cylinderBranchIDParameter = cylinderBranchID.HasValue ?
            new ObjectParameter("cylinderBranchID", cylinderBranchID) :
            new ObjectParameter("cylinderBranchID", typeof(int));


        var sstatParameter = sstat.HasValue ?
            new ObjectParameter("sstat", sstat) :
            new ObjectParameter("sstat", typeof(int));


        var transactionPointParameter = transactionPoint.HasValue ?
            new ObjectParameter("transactionPoint", transactionPoint) :
            new ObjectParameter("transactionPoint", typeof(int));


        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var transTypeParameter = transType.HasValue ?
            new ObjectParameter("TransType", transType) :
            new ObjectParameter("TransType", typeof(int));


        var cylinderStatusParameter = cylinderStatus.HasValue ?
            new ObjectParameter("CylinderStatus", cylinderStatus) :
            new ObjectParameter("CylinderStatus", typeof(int));


        var ownerIdParameter = ownerId.HasValue ?
            new ObjectParameter("OwnerId", ownerId) :
            new ObjectParameter("OwnerId", typeof(int));


        var vendorBranchIDParameter = vendorBranchID.HasValue ?
            new ObjectParameter("vendorBranchID", vendorBranchID) :
            new ObjectParameter("vendorBranchID", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblCylinderInVanInsert", vehicleIDParameter, initialSizeParameter, remainingsizeforRefillParameter, vanBatchNumberParameter, vendorNameParameter, cylinderLoadingDateTimeParameter, cylinderIDParameter, cylinderNumberParameter, cylinderVendorIDParameter, cylinderBranchIDParameter, sstatParameter, transactionPointParameter, locationIDParameter, transTypeParameter, cylinderStatusParameter, ownerIdParameter, vendorBranchIDParameter, companyIDParameter, branchIDParameter, userIDParameter);
    }


    public virtual ObjectResult<usp_CylinderMasterGetbyBarCode_Result> usp_CylinderMasterGetbyBarCode(string barcode)
    {

        var barcodeParameter = barcode != null ?
            new ObjectParameter("Barcode", barcode) :
            new ObjectParameter("Barcode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetbyBarCode_Result>("usp_CylinderMasterGetbyBarCode", barcodeParameter);
    }


    public virtual ObjectResult<usp_CylinderMasterGetByID_Result> usp_CylinderMasterGetByID(string cylindeNumber)
    {

        var cylindeNumberParameter = cylindeNumber != null ?
            new ObjectParameter("CylindeNumber", cylindeNumber) :
            new ObjectParameter("CylindeNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGetByID_Result>("usp_CylinderMasterGetByID", cylindeNumberParameter);
    }


    public virtual ObjectResult<Nullable<int>> usp_tblTransactionAllDetailInsert(string transactionNumber, Nullable<int> transactionMode, Nullable<int> sourceCylinderID, Nullable<byte> flgSourceBarCodeExists, string sourceBarCodeNumber, string sourceCylinderNumber, Nullable<double> sourceCylinderSize, Nullable<int> targetCylinderID, Nullable<byte> flgTargetBarCodeExists, string targetBarCodeNumber, string targetCylinderNumber, Nullable<double> targetCylinderSize, Nullable<byte> sstat, Nullable<int> customerID, Nullable<int> currentCustomerBranchID, string customerName, string vendorName, string sizeUOM, string presentState, Nullable<int> presentStateID, Nullable<int> locationID, string vanBatchNumber, string transactionDateTime, Nullable<int> companyID, Nullable<int> branchID, Nullable<int> userID, string gasInUse)
    {

        var transactionNumberParameter = transactionNumber != null ?
            new ObjectParameter("TransactionNumber", transactionNumber) :
            new ObjectParameter("TransactionNumber", typeof(string));


        var transactionModeParameter = transactionMode.HasValue ?
            new ObjectParameter("TransactionMode", transactionMode) :
            new ObjectParameter("TransactionMode", typeof(int));


        var sourceCylinderIDParameter = sourceCylinderID.HasValue ?
            new ObjectParameter("SourceCylinderID", sourceCylinderID) :
            new ObjectParameter("SourceCylinderID", typeof(int));


        var flgSourceBarCodeExistsParameter = flgSourceBarCodeExists.HasValue ?
            new ObjectParameter("flgSourceBarCodeExists", flgSourceBarCodeExists) :
            new ObjectParameter("flgSourceBarCodeExists", typeof(byte));


        var sourceBarCodeNumberParameter = sourceBarCodeNumber != null ?
            new ObjectParameter("SourceBarCodeNumber", sourceBarCodeNumber) :
            new ObjectParameter("SourceBarCodeNumber", typeof(string));


        var sourceCylinderNumberParameter = sourceCylinderNumber != null ?
            new ObjectParameter("SourceCylinderNumber", sourceCylinderNumber) :
            new ObjectParameter("SourceCylinderNumber", typeof(string));


        var sourceCylinderSizeParameter = sourceCylinderSize.HasValue ?
            new ObjectParameter("SourceCylinderSize", sourceCylinderSize) :
            new ObjectParameter("SourceCylinderSize", typeof(double));


        var targetCylinderIDParameter = targetCylinderID.HasValue ?
            new ObjectParameter("TargetCylinderID", targetCylinderID) :
            new ObjectParameter("TargetCylinderID", typeof(int));


        var flgTargetBarCodeExistsParameter = flgTargetBarCodeExists.HasValue ?
            new ObjectParameter("flgTargetBarCodeExists", flgTargetBarCodeExists) :
            new ObjectParameter("flgTargetBarCodeExists", typeof(byte));


        var targetBarCodeNumberParameter = targetBarCodeNumber != null ?
            new ObjectParameter("TargetBarCodeNumber", targetBarCodeNumber) :
            new ObjectParameter("TargetBarCodeNumber", typeof(string));


        var targetCylinderNumberParameter = targetCylinderNumber != null ?
            new ObjectParameter("TargetCylinderNumber", targetCylinderNumber) :
            new ObjectParameter("TargetCylinderNumber", typeof(string));


        var targetCylinderSizeParameter = targetCylinderSize.HasValue ?
            new ObjectParameter("TargetCylinderSize", targetCylinderSize) :
            new ObjectParameter("TargetCylinderSize", typeof(double));


        var sstatParameter = sstat.HasValue ?
            new ObjectParameter("Sstat", sstat) :
            new ObjectParameter("Sstat", typeof(byte));


        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));


        var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
            new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
            new ObjectParameter("CurrentCustomerBranchID", typeof(int));


        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));


        var vendorNameParameter = vendorName != null ?
            new ObjectParameter("VendorName", vendorName) :
            new ObjectParameter("VendorName", typeof(string));


        var sizeUOMParameter = sizeUOM != null ?
            new ObjectParameter("SizeUOM", sizeUOM) :
            new ObjectParameter("SizeUOM", typeof(string));


        var presentStateParameter = presentState != null ?
            new ObjectParameter("PresentState", presentState) :
            new ObjectParameter("PresentState", typeof(string));


        var presentStateIDParameter = presentStateID.HasValue ?
            new ObjectParameter("PresentStateID", presentStateID) :
            new ObjectParameter("PresentStateID", typeof(int));


        var locationIDParameter = locationID.HasValue ?
            new ObjectParameter("LocationID", locationID) :
            new ObjectParameter("LocationID", typeof(int));


        var vanBatchNumberParameter = vanBatchNumber != null ?
            new ObjectParameter("VanBatchNumber", vanBatchNumber) :
            new ObjectParameter("VanBatchNumber", typeof(string));


        var transactionDateTimeParameter = transactionDateTime != null ?
            new ObjectParameter("TransactionDateTime", transactionDateTime) :
            new ObjectParameter("TransactionDateTime", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var gasInUseParameter = gasInUse != null ?
            new ObjectParameter("GasInUse", gasInUse) :
            new ObjectParameter("GasInUse", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblTransactionAllDetailInsert", transactionNumberParameter, transactionModeParameter, sourceCylinderIDParameter, flgSourceBarCodeExistsParameter, sourceBarCodeNumberParameter, sourceCylinderNumberParameter, sourceCylinderSizeParameter, targetCylinderIDParameter, flgTargetBarCodeExistsParameter, targetBarCodeNumberParameter, targetCylinderNumberParameter, targetCylinderSizeParameter, sstatParameter, customerIDParameter, currentCustomerBranchIDParameter, customerNameParameter, vendorNameParameter, sizeUOMParameter, presentStateParameter, presentStateIDParameter, locationIDParameter, vanBatchNumberParameter, transactionDateTimeParameter, companyIDParameter, branchIDParameter, userIDParameter, gasInUseParameter);
    }


    public virtual ObjectResult<string> usp_CylinderMasterInsertUpdate(string cylindeNumber, string barcode, Nullable<int> manufacturer, string purchaseDate, Nullable<int> initialGas, Nullable<int> wLCapacity, Nullable<int> wLCapacityUOMID, Nullable<int> workingPressure, Nullable<int> workingPressureUOMID, string testDate, string nextTestDate, Nullable<int> valveModel, Nullable<int> presentState, Nullable<int> gasInUse, Nullable<int> owner, Nullable<double> size, Nullable<int> sizeUOMID, Nullable<int> currentLocation, Nullable<int> currentCustomerBranchID, Nullable<int> branchid, Nullable<int> companyID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status)
    {

        var cylindeNumberParameter = cylindeNumber != null ?
            new ObjectParameter("CylindeNumber", cylindeNumber) :
            new ObjectParameter("CylindeNumber", typeof(string));


        var barcodeParameter = barcode != null ?
            new ObjectParameter("Barcode", barcode) :
            new ObjectParameter("Barcode", typeof(string));


        var manufacturerParameter = manufacturer.HasValue ?
            new ObjectParameter("Manufacturer", manufacturer) :
            new ObjectParameter("Manufacturer", typeof(int));


        var purchaseDateParameter = purchaseDate != null ?
            new ObjectParameter("PurchaseDate", purchaseDate) :
            new ObjectParameter("PurchaseDate", typeof(string));


        var initialGasParameter = initialGas.HasValue ?
            new ObjectParameter("InitialGas", initialGas) :
            new ObjectParameter("InitialGas", typeof(int));


        var wLCapacityParameter = wLCapacity.HasValue ?
            new ObjectParameter("WLCapacity", wLCapacity) :
            new ObjectParameter("WLCapacity", typeof(int));


        var wLCapacityUOMIDParameter = wLCapacityUOMID.HasValue ?
            new ObjectParameter("WLCapacityUOMID", wLCapacityUOMID) :
            new ObjectParameter("WLCapacityUOMID", typeof(int));


        var workingPressureParameter = workingPressure.HasValue ?
            new ObjectParameter("WorkingPressure", workingPressure) :
            new ObjectParameter("WorkingPressure", typeof(int));


        var workingPressureUOMIDParameter = workingPressureUOMID.HasValue ?
            new ObjectParameter("WorkingPressureUOMID", workingPressureUOMID) :
            new ObjectParameter("WorkingPressureUOMID", typeof(int));


        var testDateParameter = testDate != null ?
            new ObjectParameter("TestDate", testDate) :
            new ObjectParameter("TestDate", typeof(string));


        var nextTestDateParameter = nextTestDate != null ?
            new ObjectParameter("NextTestDate", nextTestDate) :
            new ObjectParameter("NextTestDate", typeof(string));


        var valveModelParameter = valveModel.HasValue ?
            new ObjectParameter("ValveModel", valveModel) :
            new ObjectParameter("ValveModel", typeof(int));


        var presentStateParameter = presentState.HasValue ?
            new ObjectParameter("PresentState", presentState) :
            new ObjectParameter("PresentState", typeof(int));


        var gasInUseParameter = gasInUse.HasValue ?
            new ObjectParameter("GasInUse", gasInUse) :
            new ObjectParameter("GasInUse", typeof(int));


        var ownerParameter = owner.HasValue ?
            new ObjectParameter("Owner", owner) :
            new ObjectParameter("Owner", typeof(int));


        var sizeParameter = size.HasValue ?
            new ObjectParameter("Size", size) :
            new ObjectParameter("Size", typeof(double));


        var sizeUOMIDParameter = sizeUOMID.HasValue ?
            new ObjectParameter("SizeUOMID", sizeUOMID) :
            new ObjectParameter("SizeUOMID", typeof(int));


        var currentLocationParameter = currentLocation.HasValue ?
            new ObjectParameter("CurrentLocation", currentLocation) :
            new ObjectParameter("CurrentLocation", typeof(int));


        var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
            new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
            new ObjectParameter("CurrentCustomerBranchID", typeof(int));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("Branchid", branchid) :
            new ObjectParameter("Branchid", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CylinderMasterInsertUpdate", cylindeNumberParameter, barcodeParameter, manufacturerParameter, purchaseDateParameter, initialGasParameter, wLCapacityParameter, wLCapacityUOMIDParameter, workingPressureParameter, workingPressureUOMIDParameter, testDateParameter, nextTestDateParameter, valveModelParameter, presentStateParameter, gasInUseParameter, ownerParameter, sizeParameter, sizeUOMIDParameter, currentLocationParameter, currentCustomerBranchIDParameter, branchidParameter, companyIDParameter, createdByParameter, updateByParameter, statusParameter);
    }


    public virtual ObjectResult<string> usp_CylinderMasterInsertUpdateMobile(string cylindeNumber, string barcode, Nullable<int> presentState, Nullable<int> gasInUse, Nullable<int> owner, Nullable<double> size, Nullable<int> sizeUOMID, Nullable<int> currentLocation, Nullable<int> currentCustomerBranchID, Nullable<int> branchid, Nullable<int> companyID, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<bool> status, Nullable<int> isPrintDone)
    {

        var cylindeNumberParameter = cylindeNumber != null ?
            new ObjectParameter("CylindeNumber", cylindeNumber) :
            new ObjectParameter("CylindeNumber", typeof(string));


        var barcodeParameter = barcode != null ?
            new ObjectParameter("Barcode", barcode) :
            new ObjectParameter("Barcode", typeof(string));


        var presentStateParameter = presentState.HasValue ?
            new ObjectParameter("PresentState", presentState) :
            new ObjectParameter("PresentState", typeof(int));


        var gasInUseParameter = gasInUse.HasValue ?
            new ObjectParameter("GasInUse", gasInUse) :
            new ObjectParameter("GasInUse", typeof(int));


        var ownerParameter = owner.HasValue ?
            new ObjectParameter("Owner", owner) :
            new ObjectParameter("Owner", typeof(int));


        var sizeParameter = size.HasValue ?
            new ObjectParameter("Size", size) :
            new ObjectParameter("Size", typeof(double));


        var sizeUOMIDParameter = sizeUOMID.HasValue ?
            new ObjectParameter("SizeUOMID", sizeUOMID) :
            new ObjectParameter("SizeUOMID", typeof(int));


        var currentLocationParameter = currentLocation.HasValue ?
            new ObjectParameter("CurrentLocation", currentLocation) :
            new ObjectParameter("CurrentLocation", typeof(int));


        var currentCustomerBranchIDParameter = currentCustomerBranchID.HasValue ?
            new ObjectParameter("CurrentCustomerBranchID", currentCustomerBranchID) :
            new ObjectParameter("CurrentCustomerBranchID", typeof(int));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("Branchid", branchid) :
            new ObjectParameter("Branchid", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        var isPrintDoneParameter = isPrintDone.HasValue ?
            new ObjectParameter("IsPrintDone", isPrintDone) :
            new ObjectParameter("IsPrintDone", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CylinderMasterInsertUpdateMobile", cylindeNumberParameter, barcodeParameter, presentStateParameter, gasInUseParameter, ownerParameter, sizeParameter, sizeUOMIDParameter, currentLocationParameter, currentCustomerBranchIDParameter, branchidParameter, companyIDParameter, createdByParameter, updateByParameter, statusParameter, isPrintDoneParameter);
    }


    public virtual ObjectResult<usp_CylinderMasterMobileGetByID_Result> usp_CylinderMasterMobileGetByID(string cylindeNumber)
    {

        var cylindeNumberParameter = cylindeNumber != null ?
            new ObjectParameter("CylindeNumber", cylindeNumber) :
            new ObjectParameter("CylindeNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterMobileGetByID_Result>("usp_CylinderMasterMobileGetByID", cylindeNumberParameter);
    }


    public virtual ObjectResult<usp_CustomerSiteMasterGetbyIDDetails_Result> usp_CustomerSiteMasterGetbyIDDetails(Nullable<int> customerIDSiteID)
    {

        var customerIDSiteIDParameter = customerIDSiteID.HasValue ?
            new ObjectParameter("CustomerIDSiteID", customerIDSiteID) :
            new ObjectParameter("CustomerIDSiteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerSiteMasterGetbyIDDetails_Result>("usp_CustomerSiteMasterGetbyIDDetails", customerIDSiteIDParameter);
    }


    public virtual ObjectResult<usp_tblUserMasterListGet_Result> usp_tblUserMasterListGet(Nullable<int> companyID, Nullable<int> branchID)
    {

        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblUserMasterListGet_Result>("usp_tblUserMasterListGet", companyIDParameter, branchIDParameter);
    }


    public virtual ObjectResult<usp_VehicleMasterListGet_Result> usp_VehicleMasterListGet(Nullable<int> companyID, Nullable<int> branchID)
    {

        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleMasterListGet_Result>("usp_VehicleMasterListGet", companyIDParameter, branchIDParameter);
    }


    public virtual ObjectResult<usp_VehicleUserMappingGet_Result> usp_VehicleUserMappingGet(Nullable<int> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleUserMappingGet_Result>("usp_VehicleUserMappingGet", userIDParameter);
    }


    public virtual ObjectResult<string> usp_VehicleUserMappingInsert(Nullable<int> vehicleID, Nullable<int> userID, Nullable<int> branchid, Nullable<int> companyID, Nullable<int> createdBy)
    {

        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("VehicleID", vehicleID) :
            new ObjectParameter("VehicleID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("Branchid", branchid) :
            new ObjectParameter("Branchid", typeof(int));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VehicleUserMappingInsert", vehicleIDParameter, userIDParameter, branchidParameter, companyIDParameter, createdByParameter);
    }


    public virtual ObjectResult<usp_CylinderCount_Result> usp_CylinderCount(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderCount_Result>("usp_CylinderCount", branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_CylinderCountm_Result> usp_CylinderCountm(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderCountm_Result>("usp_CylinderCountm", branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_CylinderCountGasInUse_Result> usp_CylinderCountGasInUse(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderCountGasInUse_Result>("usp_CylinderCountGasInUse", branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_CylinderCountPState_Result> usp_CylinderCountPState(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderCountPState_Result>("usp_CylinderCountPState", branchidParameter, companyidParameter);
    }


    public virtual int usp_TransactionGenerateReport(string transactionNumber)
    {

        var transactionNumberParameter = transactionNumber != null ?
            new ObjectParameter("TransactionNumber", transactionNumber) :
            new ObjectParameter("TransactionNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TransactionGenerateReport", transactionNumberParameter);
    }


    public virtual ObjectResult<usp_TransactionDetails_Result> usp_TransactionDetails(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> branchid, Nullable<int> companyid)
    {

        var startdateParameter = startdate.HasValue ?
            new ObjectParameter("startdate", startdate) :
            new ObjectParameter("startdate", typeof(System.DateTime));


        var enddateParameter = enddate.HasValue ?
            new ObjectParameter("enddate", enddate) :
            new ObjectParameter("enddate", typeof(System.DateTime));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransactionDetails_Result>("usp_TransactionDetails", startdateParameter, enddateParameter, branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_TransactionDetailsRefill_Result> usp_TransactionDetailsRefill(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> branchid, Nullable<int> companyid)
    {

        var startdateParameter = startdate.HasValue ?
            new ObjectParameter("startdate", startdate) :
            new ObjectParameter("startdate", typeof(System.DateTime));


        var enddateParameter = enddate.HasValue ?
            new ObjectParameter("enddate", enddate) :
            new ObjectParameter("enddate", typeof(System.DateTime));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransactionDetailsRefill_Result>("usp_TransactionDetailsRefill", startdateParameter, enddateParameter, branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_VehicleUserMappingDetails_Result> usp_VehicleUserMappingDetails(Nullable<int> companyid, Nullable<int> branchid)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleUserMappingDetails_Result>("usp_VehicleUserMappingDetails", companyidParameter, branchidParameter);
    }


    public virtual ObjectResult<string> usp_VehicleMasterInsertUpate(Nullable<int> vehicleID, string vehicleNumber, Nullable<int> companyID, Nullable<int> branchID, Nullable<System.DateTime> creationDate, Nullable<int> createdBy, Nullable<int> updateBy, Nullable<System.DateTime> updatedOn, Nullable<bool> status)
    {

        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("VehicleID", vehicleID) :
            new ObjectParameter("VehicleID", typeof(int));


        var vehicleNumberParameter = vehicleNumber != null ?
            new ObjectParameter("VehicleNumber", vehicleNumber) :
            new ObjectParameter("VehicleNumber", typeof(string));


        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var creationDateParameter = creationDate.HasValue ?
            new ObjectParameter("CreationDate", creationDate) :
            new ObjectParameter("CreationDate", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var updateByParameter = updateBy.HasValue ?
            new ObjectParameter("UpdateBy", updateBy) :
            new ObjectParameter("UpdateBy", typeof(int));


        var updatedOnParameter = updatedOn.HasValue ?
            new ObjectParameter("UpdatedOn", updatedOn) :
            new ObjectParameter("UpdatedOn", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_VehicleMasterInsertUpate", vehicleIDParameter, vehicleNumberParameter, companyIDParameter, branchIDParameter, creationDateParameter, createdByParameter, updateByParameter, updatedOnParameter, statusParameter);
    }


    public virtual ObjectResult<usp_VehicleMasterGet_Result> usp_VehicleMasterGet(Nullable<int> companyID, Nullable<int> branchID)
    {

        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleMasterGet_Result>("usp_VehicleMasterGet", companyIDParameter, branchIDParameter);
    }


    public virtual ObjectResult<usp_VehicleMasterGetByID_Result> usp_VehicleMasterGetByID(Nullable<int> companyID, Nullable<int> branchID, Nullable<int> vehicleID)
    {

        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("CompanyID", companyID) :
            new ObjectParameter("CompanyID", typeof(int));


        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));


        var vehicleIDParameter = vehicleID.HasValue ?
            new ObjectParameter("VehicleID", vehicleID) :
            new ObjectParameter("VehicleID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VehicleMasterGetByID_Result>("usp_VehicleMasterGetByID", companyIDParameter, branchIDParameter, vehicleIDParameter);
    }


    public virtual ObjectResult<usp_CylinderAgeAnalysisReport_Result> usp_CylinderAgeAnalysisReport(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> branchid, Nullable<int> companyid)
    {

        var startdateParameter = startdate.HasValue ?
            new ObjectParameter("startdate", startdate) :
            new ObjectParameter("startdate", typeof(System.DateTime));


        var enddateParameter = enddate.HasValue ?
            new ObjectParameter("enddate", enddate) :
            new ObjectParameter("enddate", typeof(System.DateTime));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderAgeAnalysisReport_Result>("usp_CylinderAgeAnalysisReport", startdateParameter, enddateParameter, branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_CylinderExpiryReport_Result> usp_CylinderExpiryReport(Nullable<int> companyID, Nullable<int> branchid)
    {

        var companyIDParameter = companyID.HasValue ?
            new ObjectParameter("companyID", companyID) :
            new ObjectParameter("companyID", typeof(int));


        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderExpiryReport_Result>("usp_CylinderExpiryReport", companyIDParameter, branchidParameter);
    }


    public virtual ObjectResult<usp_CylinderMasterGet_Result> usp_CylinderMasterGet(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterGet_Result>("usp_CylinderMasterGet", branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_CylinderMasterMobileGet_Result> usp_CylinderMasterMobileGet(Nullable<int> branchid, Nullable<int> companyid)
    {

        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CylinderMasterMobileGet_Result>("usp_CylinderMasterMobileGet", branchidParameter, companyidParameter);
    }


    public virtual ObjectResult<usp_ManufacturerList_Result> usp_ManufacturerList()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManufacturerList_Result>("usp_ManufacturerList");
    }


    public virtual ObjectResult<USP_GetUserDetails_Result> USP_GetUserDetails(string loginId, string password, string phone)
    {

        var loginIdParameter = loginId != null ?
            new ObjectParameter("LoginId", loginId) :
            new ObjectParameter("LoginId", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserDetails_Result>("USP_GetUserDetails", loginIdParameter, passwordParameter, phoneParameter);
    }

}

}

